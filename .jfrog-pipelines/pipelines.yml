# resources:
#   - name: resource_2
#     type: GitRepo
#     configuration:
#       gitProvider: test
#       path: seekhJaunga/pipelineBasic
#       buildOn:
#          branchCreate: false
#   - name: testScan
#     type: BuildInfo
#     configuration:
#       sourceArtifactory: punyaTest
         # commit: false
  # - name: myBuildInfo
  #   type: BuildInfo
  #   configuration:
  #     sourceArtifactory: s_artifactory
  #     buildName: SampleApp
  #     buildNumber: 1 
  # - name: resource_4
  #   type: GitRepo
  #   configuration:
  #     gitProvider: test
  # #     path: seekhJaunga/Ekart
  # - name: myResource
  #   type: PropertyBag
  #   configuration:
  #     runNumber: 0
  #     x: 5
  #     xx: 5
      # xxx: 5
      # xxxx: 5
      # xxxxx: 5
      # xxxxxx: 5
      # xxxxxxx: 5
      # y: 5
      # yy: 5
      # yyy: 5
      # yyyy: 5
      # yyyyy: 5
      # yyyyyy: 5
# {{ range $i, $e := until 5}}
#   - name: "bar{{$i}}"
#     type: PropertyBagd
#     configuration:
#       runNumber1: 0
# {{ end }}
  #     x1: 5
      # xx1: 5
      # xxx: 5
      # xxxx: 5
      # xxxxx: 5
      # xxxxxx: 5
      # xxxxxxx: 5
      # y: 5
      # yy: 5
      # yyy: 5
      # yyyy: 5
      # yyyyy1: 5
      # yyyyyy: 5
  # - name: myResource2
  #   type: PropertyBag
  #   configuration:
  #     runNumber2: 0
  #     x2: 5
  #     xx2: 5
      # xxx: 5
      # xxxx: 5
      # xxxxx: 5
      # xxxxxx: 5
      # xxxxxxx: 5
      # y: 5
      # yy: 5
      # yyy: 5
      # yyyy: 5
      # yyyyy2: 5
      # yyyyyy: 5

# resources:
#   - name: propertyBag_1
#     type: PropertyBag
#     configuration:
#       property1: "jfrog"
#       property2: "pipelines"
pipelines:
  - name: single_test_punya
    configuration:
      # nodePool: dummy_np_2
      environmentVariables:
        readOnly:
          # env: "PIPA"
          #   default: "singletest"
          #   values: ["singletest", "testing"]
          #   allowCustom: false
          env2: "test_p2"
          # KEY1:
          #   description: Your key will be used as reference to your secret
          #   default: Your key will be used as reference to your secret
          #   allowCustom: true
          # VALUE1:
          #   description: Insert your secret value
          #   default: '*****'
          #   secure: true
          #   allowCustom: true
          # env3:
          #   defaultMultipleValues: ["r,andom_1"]
          #   # default: "r,andom_2"
          #   description: "testing"
          #   values: ["r,andom_1", "r,andom_2", "r,andom_3", "r,andom_4"]
          #   allowCustom: false
          #   allowMultipleValues: false
    steps:
      # - name: scan
      #   type: XrayScan
      #   configuration:
      #     #inherits all the tags from bash
      #     failOnScan: true                     # default true
      #     inputResources:
      #       - name: myBuildInfo         # required
      #         trigger: false
      #   execution:
      #     onStart:
      #       - echo "Preparing for work..."
      #       - echo "Prepping build environment"
      #     onSuccess:
      #       - echo "Job well done!"
      #     onFailure:
      #       - echo "uh oh, something went wrong"
      #     onComplete: #always
      #       - echo "Cleaning up some stuff"
      # - name: my_step
      #   type: Bash
      #   configuration:
      #     inputResources:
      #       - name: resource_2        # required
        # configuration:
        #   integrations:
        #     - name: testpunya
        # configuration:
        #   timeoutSeconds: 1
        # execution:
        #   onExecute:
        #     - echo "This is my step."
            # - echo $int_myCredentials_test
            # - echo $int_testpunya_val
            # - echo $val
            # - |
            #   if [ $int_testpunya_val = "secure" ]; then
            #     echo matched
            #   else
            #     echo NotMatched
            #   fi
        #     - |
        #       if [ $int_test_val2 = "pass5New@123" ]; then
        #         echo matched
        #       else
        #         echo NotMatched
        #       fi
        #     - |
        #       if [ $VALUE1 = "testing" ]; then
        #         echo matched
        #       else
        #         echo NotMatched
        #       fi
        #     - echo $env"hehe"
      # - name: my_step_2
      #   type: Bash
        # configuration:
        #   inputResources:
        #     - name: resource_2        # required
        # configuration:
      #     inputSteps:
      #       - name: my_step
        # execution:
        #   onExecute:
        #     - echo "This is my step."
      # - name: my_step_3
      #   type: Bash
      #   configuration:
      #     inputSteps:
      #       - name: my_step
      #   execution:
      #     onExecute:
      #       - echo "This is my step."
#       # - name: step_1
#       #   type: Bash
#       #   configuration:
#       #     integrations:
#       #       - name: testing
#       #   execution:
#       #     onExecute:
#       #       - echo $int_testing_val1
#       #       - echo $int_testing_val2
#       #       - |
#       #         if [ $int_testing_val1 = "password1" ]; then
#       #           echo matched
#       #         else
#       #           echo NotMatched
#       #         fi
#       #       - |
#       #         if [ $int_testing_val2 = "password2" ]; then
#       #           echo matched
#       #         else
#       #           echo NotMatched
#       #         fi
      - name: ''
        type: Bash
        # configuration:
      #     affinityGroup: trigger
      #     timeoutSeconds: 5
      #     inputResources:
            # - name: propertyBag_1
            # - name: resource_4
            # - name: resource_1
          # outputResources:
          #   - name: myResource
          #   - name: myResource1
          #   - name: myResource2
        execution:
          onExecute:
            - printenv
            - echo $env
            - echo $env2
            # - write_output myResource runNumber=${run_number}
            # - write_output myResource1 runNumber1=${run_number}
            # - write_output myResource2 runNumber2=${run_number}
            # - echo $env3
            # - echo 
            # - echo $res_resource_1_path
      #       - echo $res_resource_3_path
      #       - write_output myResource runNumber=${run_number}
      #       - echo ${run_number}
      #       - echo "done"
      # - name: trigger_2
      #   type: Bash
      #   configuration:
      #     timeoutSeconds: 5
          # inputResources:
          #   - name: myResource
          #     newVersionOnly: true
          #   - name: myResource1
          #     newVersionOnly: true
          #   - name: myResource2
          #     newVersionOnly: true
          # chronological: true
      #     affinityGroup: trigger
          # inputSteps: 
          #   - name: trigger_1
            # - name: step_1
        # execution:
        #   onExecute:
        #     - printenv
        #     - echo ${#env3[@]}
        #     - echo ${env3[2]}
            # - echo $env
            # - echo $env2
        #     - echo ${env3[0]}
            # - echo "Running second trigger done"
      #       # - $env3[0]
      #       # - $env3.Count
      #       # - $env2
      #       # - $env


  # pipelines:
  #   - name: S_Bash_3852_001
  #     configuration:
  #       environmentVariables:
  #         readOnly:
  #           pipevar1: "1"
  #           pipevar2: "2"
  #     steps:
  #       - name: S_Bash_3852_001_1
  #         type: PowerShe,
  #         configuration:
  #           environmentVariables:
  #             S_Bash_3852_001_1: "yes"
  #           affinityGroup: 'group'
  #         execution:
  #           onExecute:
  #             - if [ "$S_Bash_3852_001_1" != "yes" ]; then return 1; fi
  #             - echo "done"
  #             - echo $S_Bash_3852_001_1
  #             - echo $pipevar1
  #       - name: S_Bash_3852_001_2
  #         type: Bash
  #         configuration:
  #           environmentVariables:
  #             S_Bash_3852_001_2: 'yes'
  #           affinityGroup: 'group'
  #           inputSteps:
  #             - name: S_Bash_3852_001_1
  #         execution:
  #           onExecute:
  #             - if [ "$S_Bash_3852_001_2" != "yes" ]; then return 1; fi
  #             - echo "done"
  #       - name: S_Bash_3852_001_3
  #         type: Bash
  #         configuration:
  #           environmentVariables:
  #             S_Bash_3852_001_3: 'yes'
  #           affinityGroup: 'group'
  #           # inputSteps:
  #           #   - name: S_Bash_3852_001_1
  #         execution:
  #           onExecute:
  #             - if [ "$S_Bash_3852_001_3" != "yes" ]; then return 1; fi
  #             - echo "done"
  #       - name: S_Bash_3852_001_4
  #         type: Bash
  #         configuration:
  #           environmentVariables:
  #             S_Bash_3852_001_4: 'yes'
  #           affinityGroup: 'group'
  #           inputSteps:
  #             - name: S_Bash_3852_001_2
  #             - name: S_Bash_3852_001_3
  #         execution:
  #           onExecute:
  #             - if [ "$S_Bash_3852_001_4" != "yes" ]; then return 1; fi
  #             - echo "done"
  
# pipelines:
#   - name: PIPE_9455_Workflow_03
#     steps:
#       - name: step1
#         type: Bash
#         execution:
#           onExecute:
#             - echo 'step1'
#       - name: step2
#         type: Bash
#         configuration:
#           allowFailure: true
#           inputSteps:
#           - name: step1
#             status:
#               - success
#               - error
#               - failure
#         execution:
#           onExecute:
#             - echo 'success'
#             - exit 1


# pipelines: 
#   - name: jenkinsPipeline
#     steps:
#       - name: jenkinsStep
#         type: Jenkins
#         configuration: 
#                   # timeoutSeconds: 30 # uses Bash tag to set time limit, in seconds, for the step to complete
#           jenkinsJobName: infra/job/testPunya
#           integrations:
#             - name: test

# pipelines:

# {{ range $i, $e := until 1}}
# - name: "bar{{$i}}"
  # configuration:
  #   environmentVariables:
  #     readOnly:
  #       env1:
  #         default: "singletest1"
  #         values: ["singletest", "testing"]
  #         allowCustom: false
  #       env2: value2
# - name: 
  # steps:
  #   - name: 'step1'
  #     type: Bash
      # configuration:
      #   inputResources:
      #     - name: resource_2
      # configuration:
        # environmentVariables:
        #   chec: hehe
      # execution:
      #   onExecute:
      #     - echo 'step1'
          # - echoInfo 'hehe'
# {{ end }}

# - name: bar2
#   steps:
#     - name: step1
#       type: Bash
#       execution:
#         onExecute:
#           - echo 'step3'
# - name: bar3
#   steps:
#     - name: step1
#       type: Bash
#       execution:
#         onExecute:
#           - echo 'step3'

    
# resources:
#   - name: resource_2
#     type: GitRepo
#     configuration:
#       gitProvider: testGit
#       path: seekhJaunga/pipelineBasic
#       buildOn:
#          branchCreate: false
#   - name: testScan1
#     type: BuildInfo
#     configuration:
#       sourceArtifactory: testAr
#       buildName: test_signed_start
#       buildNumber: 5

# pipelines:
#   - name: xray_pipeline
#     configuration:
#       jfrogCliVersion: 2
#     steps:
#       - name: xray
#         type: Bash
        # type: XrayScan
        # configuration:
        #   inputResources:
        #     - name: testScan1
        # execution:
          # onStart:
          #   - jfrog --version
          #   - task: jfrog/build-publish@v0.0.1
          #     repository: pipelines-tasks-virtual
          #     id: build-publish
          #     input:
          #       resourceName: resource_2 # input resource name which need a build publish
          #       publishBuildInfo: "true"
          #       retry: "true" 
          #   - echo "scan complete"

# resources:
#   - name: testScan1
#     type: BuildInfo
#     configuration:
#       sourceArtifactory: s_artifactory
#       buildName: docker-local-build
#       buildNumber: 359014

# pipelines:
#   - name: xray_pipeline
#     # configuration:
#     #   jfrogCliVersion: 2.52.8
#     steps:
#       - name: xray
#         type: XrayScan
#         configuration:
#           inputResources:
#             - name: testScan1
#           integrations:
#             - name: s_artifactory
#         execution:
#           onStart:
#             - jfrog --version
#             - echo "scan complete"
#             - task: jfrog/setup-jfrog-cli@v0.1.0
#               input:
#                 version: "2.45.0"
            
      # - name: trigger_new
      #   type: NpmBuild
      #   configuration:
      #     integrations:
      #       - name: punyaTest
      #     inputResources:
      #       - name: resource_2
      #   execution:
      #     onStart:
      #       - echo hehe
